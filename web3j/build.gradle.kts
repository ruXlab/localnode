import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    kotlin("jvm")
    id("publication")
    `maven-publish`
    signing
}

group = "vc.rux.pokefork"
version = "0.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    api(project(":core"))
    implementation(libs.web3j)
    implementation(libs.bundles.logging)

    testImplementation(libs.web3j.contracts)
    testImplementation(platform(testlibs.junit.bom))
    testImplementation(testlibs.junit.api)
    testImplementation(testlibs.junit.params)
    testRuntimeOnly(testlibs.junit.engine)
    testImplementation(testlibs.assertk)
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events = mutableSetOf(
            TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED
        )
    }
}

kotlin {
    
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.jar {
    dependsOn(":core:jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Include the content of the :core module in the JAR
    from(configurations.runtimeClasspath.get()
        .filter { it.absolutePath.contains("vc/rux/pokefork/core") })
//    configurations.runtimeClasspath.get().forEach {
//        println("runtimeClasspath: $it")
//    }
    // get jar generated by :core module
    project(":core").configurations.runtimeClasspath.get().forEach {
        if (it.absolutePath.contains("core"))
            println("core runtimeClasspath: $it")
    }

//    project(":core").configurations..get().forEach {
//        println("core archives: $it")
//    }


    from(configurations.runtimeClasspath.get()
        .filter { it.absolutePath.contains("vc/rux/pokefork") && !it.absolutePath.contains("examples/") })
}
